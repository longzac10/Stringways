using UnityEngine;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.LowLevel;
using TMPro;
using System.Drawing;
using UnityEngine.UI;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.SceneManagement;
using System;

public class InputHandler5 : MonoBehaviour
{
    #region Variables

    private Camera _mainCamera;
    private LineRenderer lineRenderer;
    private GameObject firstObject;
    private GameObject secondObject;
    public GameObject limeString;
    public GameObject pinkString;
    public Material lineMaterial; // Material for the line
    private EdgeCollider2D edgeCollider;
    public float lineWidth = 0.1f; // Width of the line
    private bool isDrawing = false;
    private bool click = false;
    public static double limeStringRemaining5;
    public static double pinkStringRemaining5 = 900.0f;
    public TMP_Text limeMessageText;
    public TMP_Text pinkMessageText;
    public TMP_Text townsConnectedText;
    public TMP_Text invalidPathwaysText;
    private Point[] points = new Point[78];
    public int numberTownsVisited5 = 0;
    public Button finishButton;
    public Button selectLimeString;
    public Button selectPinkString;
    private String currentStringColour = "lime";
    public static int numberTownsMissed5 = 78;
    //public static int numberNullPathways5 = 0;
    public static int totalScore5 = 0;
    public static int numberMultiColourCross = 0;
    private String previousColour = " ";
    private int startGreen = 1;
    private int finishGreen = 1;
    public static int nonGreen = 2;
    public static int numberNonBlack = 0;

    // Vector2 arrayList of all pairs of points containing all the pathways that the player creates for Scenario1
    private List<Vector2> pathwaysScenario5 = new List<Vector2>();

    // List of all edgeColliders generated by drawn pathways
    private List<GameObject> listStrings = new List<GameObject>();

    // List of all edgeColliders generated by drawn pathways
    private List<LineRenderer> listLineRenderers = new List<LineRenderer>();

    // Vector2 arrayList of all red towns visisted
    private List<Vector2> redTownsVisited = new List<Vector2>();

    // Vector2 arrayList of all red towns visisted
    private List<Vector2> blueTownsVisited = new List<Vector2>();


    // Vector2 array of all pairs of points representing all the existing pathways
    #region Existing Pathways
    public Vector2[] existingPathways = new Vector2[]
    {
            new Vector2(0, 0), new Vector2(6, 1),
            new Vector2(0, 0), new Vector2(1, 1),
            new Vector2(0, 0), new Vector2(1, 2),
            new Vector2(0, 0), new Vector2(1, 4),
            new Vector2(0, 0), new Vector2(0, 3),
            new Vector2(0, 3), new Vector2(1, 1),
            new Vector2(0, 4), new Vector2(2, 2),
            new Vector2(0, 4), new Vector2(2, 3),
            new Vector2(0, 4), new Vector2(2, 5),
            new Vector2(0, 4), new Vector2(0, 5),
            new Vector2(0, 5), new Vector2(4, 3),
            new Vector2(0, 5), new Vector2(2, 5),
            new Vector2(0, 5), new Vector2(1, 7),
            new Vector2(0, 8), new Vector2(1, 7),
            new Vector2(0, 8), new Vector2(4, 7),
            new Vector2(0, 8), new Vector2(2, 10),
            new Vector2(0, 9), new Vector2(1, 7),
            new Vector2(0, 9), new Vector2(5, 7),
            new Vector2(0, 9), new Vector2(4, 12),
            new Vector2(0, 9), new Vector2(3, 13),
            new Vector2(0, 9), new Vector2(2, 14),
            new Vector2(0, 9), new Vector2(1, 12),
            new Vector2(0, 13), new Vector2(2, 10),
            new Vector2(0, 13), new Vector2(1, 12),
            new Vector2(0, 13), new Vector2(3, 12),
            new Vector2(0, 13), new Vector2(4, 12),
            new Vector2(0, 13), new Vector2(2, 14),

            new Vector2(1, 1), new Vector2(1, 2),
            new Vector2(1, 1), new Vector2(3, 1),
            new Vector2(1, 1), new Vector2(2, 2),
            new Vector2(1, 1), new Vector2(2, 3),
            new Vector2(1, 2), new Vector2(2, 5),
            new Vector2(1, 4), new Vector2(2, 2),
            new Vector2(1, 7), new Vector2(2, 5),
            new Vector2(1, 7), new Vector2(4, 4),
            new Vector2(1, 7), new Vector2(4, 9),
            new Vector2(1, 7), new Vector2(2, 10),
            new Vector2(1, 12), new Vector2(2, 10),
            new Vector2(1, 12), new Vector2(3, 12),
            new Vector2(1, 12), new Vector2(3, 13),

            new Vector2(2, 2), new Vector2(3, 1),
            new Vector2(2, 3), new Vector2(2, 2),
            new Vector2(2, 3), new Vector2(3, 1),
            new Vector2(2, 3), new Vector2(4, 4),
            new Vector2(2, 5), new Vector2(2, 3),
            new Vector2(2, 5), new Vector2(3, 1),
            new Vector2(2, 5), new Vector2(4, 3),
            new Vector2(2, 5), new Vector2(4, 4),
            new Vector2(2, 5), new Vector2(5, 5),
            new Vector2(2, 5), new Vector2(4, 7),
            new Vector2(2, 10), new Vector2(4, 7),
            new Vector2(2, 10), new Vector2(4, 9),
            new Vector2(2, 10), new Vector2(3, 11),
            new Vector2(2, 10), new Vector2(3, 12),
            new Vector2(2, 10), new Vector2(3, 13),
            new Vector2(2, 14), new Vector2(2, 10),
            new Vector2(2, 14), new Vector2(3, 13),
            new Vector2(2, 14), new Vector2(6, 12),
            new Vector2(2, 14), new Vector2(5, 14),

            new Vector2(3, 1), new Vector2(6, 1),
            new Vector2(3, 1), new Vector2(4, 3),
            new Vector2(3, 1), new Vector2(4, 4),
            new Vector2(3, 11), new Vector2(4, 12),
            new Vector2(3, 12), new Vector2(4, 12),
            new Vector2(3, 12), new Vector2(7, 14),
            new Vector2(3, 13), new Vector2(6, 12),
            new Vector2(3, 13), new Vector2(5, 14),

            new Vector2(4, 3), new Vector2(6, 1),
            new Vector2(4, 3), new Vector2(5, 5),
            new Vector2(4, 4), new Vector2(6, 2),
            new Vector2(4, 4), new Vector2(5, 7),
            new Vector2(4, 7), new Vector2(4, 4),
            new Vector2(4, 7), new Vector2(5, 5),
            new Vector2(4, 7), new Vector2(5, 7),
            new Vector2(4, 7), new Vector2(7, 10),
            new Vector2(4, 9), new Vector2(5, 7),
            new Vector2(4, 9), new Vector2(6, 8),
            new Vector2(4, 9), new Vector2(7, 10),
            new Vector2(4, 12), new Vector2(8, 10),
            new Vector2(4, 12), new Vector2(6, 12),

            new Vector2(5, 5), new Vector2(6, 1),
            new Vector2(5, 5), new Vector2(6, 2),
            new Vector2(5, 5), new Vector2(7, 4),
            new Vector2(5, 7), new Vector2(5, 5),
            new Vector2(5, 7), new Vector2(7, 4),
            new Vector2(5, 7), new Vector2(6, 8),
            new Vector2(5, 14), new Vector2(6, 12),
            new Vector2(5, 14), new Vector2(7, 13),

            new Vector2(6, 1), new Vector2(10, 2),
            new Vector2(6, 2), new Vector2(10, 2),
            new Vector2(6, 2), new Vector2(7, 4),
            new Vector2(6, 8), new Vector2(9, 9),
            new Vector2(6, 8), new Vector2(7, 10),
            new Vector2(6, 12), new Vector2(8, 10),
            new Vector2(6, 12), new Vector2(10, 11),
            new Vector2(6, 12), new Vector2(11, 13),
            new Vector2(6, 12), new Vector2(7, 13),
            new Vector2(6, 12), new Vector2(7, 14),

            new Vector2(7, 1), new Vector2(9, 0),
            new Vector2(7, 1), new Vector2(10, 2),
            new Vector2(7, 4), new Vector2(9, 0),
            new Vector2(7, 4), new Vector2(10, 2),
            new Vector2(7, 4), new Vector2(11, 2),
            new Vector2(7, 4), new Vector2(8, 5),
            new Vector2(7, 10), new Vector2(8, 5),
            new Vector2(7, 10), new Vector2(9, 5),
            new Vector2(7, 10), new Vector2(10, 7),
            new Vector2(7, 10), new Vector2(8, 7),
            new Vector2(7, 13), new Vector2(10, 12),
            new Vector2(7, 13), new Vector2(8, 14),
            new Vector2(7, 14), new Vector2(10, 11),
            new Vector2(7, 14), new Vector2(11, 11),
            new Vector2(7, 14), new Vector2(12, 11),
            new Vector2(7, 14), new Vector2(10, 12),
            new Vector2(7, 14), new Vector2(11, 13),

            new Vector2(8, 5), new Vector2(9, 0),
            new Vector2(8, 5), new Vector2(10, 2),
            new Vector2(8, 5), new Vector2(10, 3),
            new Vector2(8, 5), new Vector2(9, 5),
            new Vector2(8, 10), new Vector2(9, 9),
            new Vector2(8, 10), new Vector2(10, 9),
            new Vector2(8, 10), new Vector2(12, 11),
            new Vector2(8, 10), new Vector2(10, 11),
            new Vector2(8, 10), new Vector2(10, 11),
            new Vector2(8, 14), new Vector2(10, 11),
            new Vector2(8, 14), new Vector2(10, 12),
            new Vector2(8, 14), new Vector2(14, 13),

            new Vector2(9, 0), new Vector2(12, 1),
            new Vector2(9, 0), new Vector2(11, 2),
            new Vector2(9, 0), new Vector2(10, 2),
            new Vector2(9, 0), new Vector2(10, 3),
            new Vector2(9, 5), new Vector2(10, 2),
            new Vector2(9, 5), new Vector2(11, 2),
            new Vector2(9, 5), new Vector2(11, 4),
            new Vector2(9, 5), new Vector2(11, 8),
            new Vector2(9, 5), new Vector2(10, 7),
            new Vector2(9, 5), new Vector2(10, 9),
            new Vector2(9, 9), new Vector2(9, 5),
            new Vector2(9, 9), new Vector2(10, 9),
            new Vector2(9, 9), new Vector2(11, 11),
            new Vector2(9, 9), new Vector2(10, 11),
            new Vector2(9, 9), new Vector2(10, 7),

            new Vector2(10, 2), new Vector2(11, 2),
            new Vector2(10, 2), new Vector2(12, 1),
            new Vector2(10, 3), new Vector2(11, 2),
            new Vector2(10, 7), new Vector2(11, 4),
            new Vector2(10, 7), new Vector2(11, 8),
            new Vector2(10, 9), new Vector2(10, 7),
            new Vector2(10, 9), new Vector2(11, 8),
            new Vector2(10, 9), new Vector2(12, 11),
            new Vector2(10, 9), new Vector2(11, 11),
            new Vector2(10, 11), new Vector2(10, 9),
            new Vector2(10, 11), new Vector2(13, 14),
            new Vector2(10, 12), new Vector2(11, 11),
            new Vector2(10, 12), new Vector2(12, 11),
            new Vector2(10, 12), new Vector2(14, 13),

            new Vector2(11, 2), new Vector2(12, 1),
            new Vector2(11, 4), new Vector2(11, 2),
            new Vector2(11, 4), new Vector2(12, 1),
            new Vector2(11, 8), new Vector2(11, 4),
            new Vector2(11, 11), new Vector2(13, 14),
            new Vector2(11, 13), new Vector2(11, 11),
            new Vector2(11, 13), new Vector2(12, 11),
            new Vector2(11, 13), new Vector2(16, 11),
            new Vector2(11, 13), new Vector2(14, 12),
            new Vector2(11, 13), new Vector2(14, 13),

            new Vector2(12, 1), new Vector2(17, 0),
            new Vector2(12, 1), new Vector2(15, 1),
            new Vector2(12, 1), new Vector2(16, 2),
            new Vector2(12, 1), new Vector2(16, 3),
            new Vector2(12, 1), new Vector2(15, 3),
            new Vector2(12, 1), new Vector2(14, 5),
            new Vector2(12, 1), new Vector2(14, 6),
            new Vector2(12, 11), new Vector2(14, 12),
            new Vector2(12, 11), new Vector2(14, 13),
            new Vector2(12, 11), new Vector2(13, 14),

            new Vector2(13, 14), new Vector2(14, 12),
            new Vector2(13, 14), new Vector2(14, 13),
            new Vector2(13, 14), new Vector2(15, 14),

            new Vector2(14, 5), new Vector2(15, 3),
            new Vector2(14, 5), new Vector2(16, 8),
            new Vector2(14, 6), new Vector2(14,5),
            new Vector2(14, 6), new Vector2(15, 3),
            new Vector2(14, 6), new Vector2(16, 8),
            new Vector2(14, 12), new Vector2(20, 11),
            new Vector2(14, 12), new Vector2(17, 13),
            new Vector2(14, 12), new Vector2(16, 13),
            new Vector2(14, 12), new Vector2(17, 14),
            new Vector2(14, 12), new Vector2(15, 14),
            new Vector2(14, 13), new Vector2(15, 12),
            new Vector2(14, 13), new Vector2(20, 14),
            new Vector2(14, 13), new Vector2(17, 14),
            new Vector2(14, 13), new Vector2(15, 14),

            new Vector2(15, 1), new Vector2(17, 0),
            new Vector2(15, 1), new Vector2(20, 1),
            new Vector2(15, 1), new Vector2(19, 3),
            new Vector2(15, 3), new Vector2(17, 0),
            new Vector2(15, 3), new Vector2(20, 1),
            new Vector2(15, 3), new Vector2(16, 3),
            new Vector2(15, 12), new Vector2(16, 11),
            new Vector2(15, 12), new Vector2(18, 11),
            new Vector2(15, 12), new Vector2(17, 13),
            new Vector2(15, 14), new Vector2(16, 13),
            new Vector2(15, 14), new Vector2(17, 13),
            new Vector2(15, 14), new Vector2(17, 14),

            new Vector2(16, 2), new Vector2(17, 0),
            new Vector2(16, 2), new Vector2(20, 1),
            new Vector2(16, 2), new Vector2(19, 3),
            new Vector2(16, 3), new Vector2(16, 2),
            new Vector2(16, 3), new Vector2(19, 3),
            new Vector2(16, 3), new Vector2(17, 0),
            new Vector2(16, 3), new Vector2(20, 1),
            new Vector2(16, 8), new Vector2(19, 7),
            new Vector2(16, 11), new Vector2(18, 11),
            new Vector2(16, 11), new Vector2(17, 13),
            new Vector2(16, 11), new Vector2(17, 14),
            new Vector2(16, 13), new Vector2(18, 11),
            new Vector2(16, 13), new Vector2(20, 12),

            new Vector2(17, 0), new Vector2(20, 1),
            new Vector2(17, 0), new Vector2(19, 3),
            new Vector2(17, 13), new Vector2(18, 11),
            new Vector2(17, 13), new Vector2(20, 14),
            new Vector2(17, 14), new Vector2(18, 11),
            new Vector2(17, 14), new Vector2(20, 11),
            new Vector2(17, 14), new Vector2(19, 13),

            new Vector2(18, 11), new Vector2(20, 11),
            new Vector2(18, 11), new Vector2(20, 12),
            new Vector2(18, 11), new Vector2(20, 14),
            new Vector2(18, 11), new Vector2(19, 13),

            new Vector2(19, 3), new Vector2(20, 1),
            new Vector2(19, 13), new Vector2(20, 11),
            new Vector2(19, 13), new Vector2(20, 12),
            new Vector2(19, 13), new Vector2(20, 14),

    };
    #endregion

    #endregion


    void Start()
    {
        _mainCamera = Camera.main;

        limeStringRemaining5 = InputHandler4.limeStringRemaining4;
        pinkStringRemaining5 = InputHandler4.pinkStringRemaining4;
        ScoreHandler.nextSceneNumber = 9;
    }

    void Update()
    {

        if (isDrawing)
        {
            lineRenderer.positionCount = 2;
            // Get cursor position for the current frame
            Vector2 cursorPosition = Camera.main.ScreenToWorldPoint(Input.mousePosition);
            // Ancor line to first point while drawing
            lineRenderer.SetPosition(0, firstObject.transform.position);
            // Line tracks the cursor position
            lineRenderer.SetPosition(1, cursorPosition);
        }
        else
        {
            if (click && lineRenderer != null)
            {
                // Draw Line between two points
                lineRenderer.SetPosition(0, firstObject.transform.position);
                lineRenderer.SetPosition(1, secondObject.transform.position);

                listLineRenderers.Add(lineRenderer);

                // Add First point of pathway drawn
                pathwaysScenario5.Add(firstObject.transform.position);
                // Add Second point of pathway drawn
                pathwaysScenario5.Add(secondObject.transform.position);
                /*
                foreach (Vector2 point in pathwaysScenario5)
                {
                    Debug.Log(point.x.ToString() + ", " + point.y.ToString());
                }
                */
                click = false;
            }
        }
    }

    private void OnClick()
    {
        var rayHit = Physics2D.GetRayIntersection(_mainCamera.ScreenPointToRay(Mouse.current.position.ReadValue()));


        if (rayHit.collider != null && rayHit.collider.gameObject.tag.Contains("Town") && isDrawing == false)
        {

            isDrawing = true;

            // If player has selected pink string, draw pink
            if(currentStringColour.Equals("pink"))
            {
                pinkString = Instantiate(pinkString, new Vector3(0, 0, 0), Quaternion.identity);
                lineRenderer = pinkString.GetComponent<LineRenderer>();
            }
            // If player has selected lime string, draw lime
            else
            {
                limeString = Instantiate(limeString, new Vector3(0, 0, 0), Quaternion.identity);
                lineRenderer = limeString.GetComponent<LineRenderer>();
            }
            
            firstObject = rayHit.collider.gameObject;
            lineRenderer.positionCount = 2;

        }
        else
        {
            if (rayHit.collider != null && rayHit.collider.gameObject.tag.Contains("Town"))
            {
                if (numberTownsMissed5 == 78)
                {                  
                    numberTownsMissed5 -= 2;
                }
                else
                {                 
                    numberTownsMissed5 -= 1;
                }


                secondObject = rayHit.collider.gameObject;
                if (currentStringColour.Equals("lime"))
                {
                    edgeCollider = limeString.GetComponent<EdgeCollider2D>();
                }
                else
                {
                    edgeCollider = pinkString.GetComponent<EdgeCollider2D>();
                }
                             
                edgeCollider.points = new Vector2[] { firstObject.transform.position, secondObject.transform.position };
                float distance = Vector3.Distance(firstObject.transform.position, secondObject.transform.position) / 2;

                if (firstObject.tag == "TownRed" && !redTownsVisited.Contains(firstObject.transform.position))
                {
                    Debug.Log("Red");
                    numberNonBlack++;
                    redTownsVisited.Add(firstObject.transform.position);
                }
                else if (firstObject.tag == "TownBlue" && !blueTownsVisited.Contains(firstObject.transform.position))
                {
                    Debug.Log("Blue");
                    numberNonBlack++;
                    blueTownsVisited.Add(firstObject.transform.position);
                }

                if (secondObject.tag == "TownRed" && !redTownsVisited.Contains(secondObject.transform.position))
                {
                    Debug.Log("Red2");
                    numberNonBlack++;
                    redTownsVisited.Add(secondObject.transform.position);
                }
                else if (secondObject.tag == "TownBlue" && !blueTownsVisited.Contains(secondObject.transform.position))
                {
                    Debug.Log("Blue2");
                    numberNonBlack++;
                    blueTownsVisited.Add(secondObject.transform.position);
                }


                if (currentStringColour.Equals("lime"))
                {
                    limeStringRemaining5 -= distance;
                    limeMessageText.SetText("Lime string remaining: " + "\n" + limeStringRemaining5.ToString("0.00") + "cm");
                }
                else
                {
                    pinkStringRemaining5 -= distance;
                    pinkMessageText.SetText("Pink string remaining: " + "\n" + pinkStringRemaining5.ToString("0.00") + "cm");
                }

                if (currentStringColour.Equals("pink"))
                {
                    listStrings.Add(pinkString);
                    Debug.Log("Added pink");

                }
                else
                {
                    listStrings.Add(limeString);
                    Debug.Log("Added lime");
                }
                Debug.Log("size of listStrings = " + listStrings.Count);

                numberMultiColourCross = CountIntersectionsBetweenTaggedLines();
                Debug.Log(numberMultiColourCross);

                townsConnectedText.SetText("Number Towns Connected:  " + "\n" + (78-numberTownsMissed5).ToString() + "/78");
                //invalidPathwaysText.SetText("Number Invalid Paths: " + "\n" + numberNullPathways5.ToString());
                
                isDrawing = false;
                click = true;
            }
        }
       
    }

    private int CountIntersectionsBetweenTaggedLines()
    {
        int intersectionCount = 0;

        for (int i = 0; i < listStrings.Count; i++)
        {
            Debug.Log("i");
            for (int j = i + 1; j < listStrings.Count; j++)
            {
                Debug.Log("j");
                GameObject line1Object = listStrings[i];
                LineRenderer line1 = line1Object.GetComponent<LineRenderer>();
                Debug.Log("Line1 colour: " + line1Object.tag);
                

                GameObject line2Object = listStrings[j];
                Debug.Log("Line2 colour: " + line2Object.tag);
                LineRenderer line2 = line2Object.GetComponent<LineRenderer>();


                // Only check intersections between lines with different tags
                if ((line1Object.tag == "lime" && line2Object.tag == "pink") ||
                    (line1Object.tag == "pink" && line2Object.tag == "lime"))
                {
                    if (DoLinesIntersect(line1, line2))
                    {
                        intersectionCount++;
                    }
                }
            }
        }

        return intersectionCount;
    }

    private bool DoLinesIntersect(LineRenderer line1, LineRenderer line2)
    {
        // Retrieve points from LineRenderers
        Vector3 p1 = line1.GetPosition(0);
        Vector3 q1 = line1.GetPosition(1);
        Vector3 p2 = line2.GetPosition(0);
        Vector3 q2 = line2.GetPosition(1);

        // 2D orientation and intersection logic
        int o1 = Orientation(p1, q1, p2);
        int o2 = Orientation(p1, q1, q2);
        int o3 = Orientation(p2, q2, p1);
        int o4 = Orientation(p2, q2, q1);

        if (o1 != o2 && o3 != o4) return true;

        if (o1 == 0 && OnSegment(p1, p2, q1)) return true;
        if (o2 == 0 && OnSegment(p1, q2, q1)) return true;
        if (o3 == 0 && OnSegment(p2, p1, q2)) return true;
        if (o4 == 0 && OnSegment(p2, q1, q2)) return true;

        return false;
    }

    private int Orientation(Vector3 p, Vector3 q, Vector3 r)
    {
        float val = (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);
        if (Mathf.Approximately(val, 0)) return 0;
        return (val > 0) ? 1 : 2;
    }

    private bool OnSegment(Vector3 p, Vector3 q, Vector3 r)
    {
        return (q.x <= Mathf.Max(p.x, r.x) && q.x >= Mathf.Min(p.x, r.x) &&
                q.y <= Mathf.Max(p.y, r.y) && q.y >= Mathf.Min(p.y, r.y));
    }

    public void FinishBtnClick2()
    {
        
        Debug.Log("Pathways Drawn: ");
        foreach (Vector2 point in pathwaysScenario5)
        {
            Debug.Log(point.x.ToString() + ", " + point.y.ToString());
        }

        if (previousColour.Equals("green"))
        {
            finishGreen = 0;
            nonGreen--;
            Debug.Log("f green");
        }

        // Calculate Score
        double score = (limeStringRemaining5 + pinkStringRemaining5) - numberTownsMissed5 * 20 - numberMultiColourCross * 50 - numberNonBlack * 50;
        totalScore5 = Convert.ToInt32(score);
        //if(totalScore5 < 0) { totalScore5 = 0; }
        Debug.Log("Score: " + score);
        
        // Move to Score scene
        SceneManager.LoadScene(12);
    }

    public void selectLimeButtonClick()
    {
        currentStringColour = "lime";
    }

    public void selectPinkButtonClick()
    {
        currentStringColour = "pink";
    }

    public void undo2()
    {
        float distance = Vector3.Distance(firstObject.transform.position, secondObject.transform.position) / 3;
        limeStringRemaining5 += distance;
        lineRenderer.positionCount = 0;
        numberTownsMissed5 += 1;
        townsConnectedText.SetText("Number Towns Connected:  " + "\n" + (78 - numberTownsMissed5).ToString() + "/78");
        limeMessageText.SetText("Lime string remaining: " + "\n" + limeStringRemaining5.ToString("0.00") + "cm");
    }

}